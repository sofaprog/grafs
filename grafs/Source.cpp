//графы
//флойд On^3
d[N][N] -//матрица смежности
//заполняем бесконечностями
for (int i = 0; i < n; i++) {
	for (int j = 0; j < n; j++) {
		d[i][j] =//бесконечность(очень большое число)(n*максвес)
	}
}
for (int i = 0; i < n; i++) {
	d[i][i] = 0;
}
for (int i = 0; i < m; i++) {
	int a, b, c;
	cin >> a >> b >> c;
	a--;
	b--;
	d[a][b] = c;
	d[b][a] = c;
}
for (int k = 0; k < n; k++) {
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			d[i][j] = min(d[i][k] + d[k][j], d[i][j]);//релаксация-основной шаг
		}
	}
}
//свойства флойда -- для ориентированного поменять считывание если есть только отрицательные ребра(не циклы!)то тоже работаетЮ для циклов не подходит, слишком долгий для больших чисел
//для кратных ребер не совсем рабоет надо написать d[a][b]=min(d[a][b],c) при считывании
//BFS находит расстояние от одной вершины до всех остальных 
int d[N];
for (int i = 0; i < n; i++) {
	d[i] = -1;
}
vector <int> q; q.push_back(x);
while (!q.empty()) {
	vector <int> nq;
	for (int x : q) {
		for int y : v[x]){
			if (d[y] == -1) {
				d[y] = d[x] + 1;
				nq.push_back(y);
			}
		}
	}
	q = nq;
}//не самый рациональный способ
#include <queue> //очередь
q.empty()
q.push(x);//добавить
q.pop;//удалить
q.front();//спрашивает кто первый в очереди
//нормальный dfs
int d[N];
void bfs(int x) {
	for (int i = 0; i < n; i++)d[i] = -1;
	queue<int>q;
	d[x] = 0;
	q.push(x);
	while (!q.empty()) {
		int x = q.front();
		q.pop();
		for (int y : v[x]) {
			if (d[y] == -1) {
				d[y] = d[x] + 1;
				q.push(y);
			}
		}
	}
}
//минусы-работает ТОЛЬКО с невзвешенными и он дольше пишется 
//если просят найти путь, то добавить массив предков int p[N] p[y]=x;